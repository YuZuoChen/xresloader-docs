// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kind.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kind_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kind_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xresloader.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kind_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kind_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kind_2eproto;
class role_upgrade_cfg;
class role_upgrade_cfgDefaultTypeInternal;
extern role_upgrade_cfgDefaultTypeInternal _role_upgrade_cfg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::role_upgrade_cfg* Arena::CreateMaybeMessage<::role_upgrade_cfg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum cost_type : int {
  EN_CT_UNKNOWN = 0,
  EN_CT_MONEY = 10001,
  EN_CT_DIAMOND = 10101,
  cost_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  cost_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool cost_type_IsValid(int value);
constexpr cost_type cost_type_MIN = EN_CT_UNKNOWN;
constexpr cost_type cost_type_MAX = EN_CT_DIAMOND;
constexpr int cost_type_ARRAYSIZE = cost_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* cost_type_descriptor();
template<typename T>
inline const std::string& cost_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, cost_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function cost_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    cost_type_descriptor(), enum_t_value);
}
inline bool cost_type_Parse(
    const std::string& name, cost_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<cost_type>(
    cost_type_descriptor(), name, value);
}
// ===================================================================

class role_upgrade_cfg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:role_upgrade_cfg) */ {
 public:
  inline role_upgrade_cfg() : role_upgrade_cfg(nullptr) {};
  virtual ~role_upgrade_cfg();

  role_upgrade_cfg(const role_upgrade_cfg& from);
  role_upgrade_cfg(role_upgrade_cfg&& from) noexcept
    : role_upgrade_cfg() {
    *this = ::std::move(from);
  }

  inline role_upgrade_cfg& operator=(const role_upgrade_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline role_upgrade_cfg& operator=(role_upgrade_cfg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const role_upgrade_cfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const role_upgrade_cfg* internal_default_instance() {
    return reinterpret_cast<const role_upgrade_cfg*>(
               &_role_upgrade_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(role_upgrade_cfg& a, role_upgrade_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(role_upgrade_cfg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(role_upgrade_cfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline role_upgrade_cfg* New() const final {
    return CreateMaybeMessage<role_upgrade_cfg>(nullptr);
  }

  role_upgrade_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<role_upgrade_cfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const role_upgrade_cfg& from);
  void MergeFrom(const role_upgrade_cfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(role_upgrade_cfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "role_upgrade_cfg";
  }
  protected:
  explicit role_upgrade_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kind_2eproto);
    return ::descriptor_table_kind_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kCostTypeFieldNumber = 3,
    kCostValueFieldNumber = 4,
    kScoreAddFieldNumber = 5,
  };
  // uint32 Id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 CostType = 3 [(.org.xresloader.verifier) = "cost_type", (.org.xresloader.field_description) = "Refer to cost_type"];
  void clear_costtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 costtype() const;
  void set_costtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_costtype() const;
  void _internal_set_costtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 CostValue = 4;
  void clear_costvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 costvalue() const;
  void set_costvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_costvalue() const;
  void _internal_set_costvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ScoreAdd = 5;
  void clear_scoreadd();
  ::PROTOBUF_NAMESPACE_ID::int32 scoreadd() const;
  void set_scoreadd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scoreadd() const;
  void _internal_set_scoreadd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:role_upgrade_cfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 costtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 costvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 scoreadd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kind_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// role_upgrade_cfg

// uint32 Id = 1;
inline void role_upgrade_cfg::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::id() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.Id)
  return _internal_id();
}
inline void role_upgrade_cfg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void role_upgrade_cfg::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.Id)
}

// uint32 Level = 2;
inline void role_upgrade_cfg::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::level() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.Level)
  return _internal_level();
}
inline void role_upgrade_cfg::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
}
inline void role_upgrade_cfg::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.Level)
}

// uint32 CostType = 3 [(.org.xresloader.verifier) = "cost_type", (.org.xresloader.field_description) = "Refer to cost_type"];
inline void role_upgrade_cfg::clear_costtype() {
  costtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::_internal_costtype() const {
  return costtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::costtype() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.CostType)
  return _internal_costtype();
}
inline void role_upgrade_cfg::_internal_set_costtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  costtype_ = value;
}
inline void role_upgrade_cfg::set_costtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_costtype(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.CostType)
}

// int32 CostValue = 4;
inline void role_upgrade_cfg::clear_costvalue() {
  costvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 role_upgrade_cfg::_internal_costvalue() const {
  return costvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 role_upgrade_cfg::costvalue() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.CostValue)
  return _internal_costvalue();
}
inline void role_upgrade_cfg::_internal_set_costvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  costvalue_ = value;
}
inline void role_upgrade_cfg::set_costvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_costvalue(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.CostValue)
}

// int32 ScoreAdd = 5;
inline void role_upgrade_cfg::clear_scoreadd() {
  scoreadd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 role_upgrade_cfg::_internal_scoreadd() const {
  return scoreadd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 role_upgrade_cfg::scoreadd() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.ScoreAdd)
  return _internal_scoreadd();
}
inline void role_upgrade_cfg::_internal_set_scoreadd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scoreadd_ = value;
}
inline void role_upgrade_cfg::set_scoreadd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scoreadd(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.ScoreAdd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cost_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cost_type>() {
  return ::cost_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kind_2eproto
