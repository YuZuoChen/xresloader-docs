<?xml version="1.0" encoding="UTF-8"?>
<root>
    <include desc="可以包含其他文件配置，然后本文件里的配置将会覆盖或合并配置，相对于当前xml的目录">sample.xml</include>
    <global>
        <work_dir desc="工作目录，相对于当前xml的目录">../xresloader/sample</work_dir>
        <xresloader_path desc="xresloader地址，相对于当前xml的目录">../target/xresloader-2.8.0.jar</xresloader_path>

        <proto desc="协议类型，对应xresloader的-p选项">protobuf</proto>
        <output_type desc="输出类型，-t选项，支持多个同时配置多种输出">bin</output_type>
        <output_type desc="多种输出时可以额外定义某个节点的重命名规则" rename="/(?i)\.bin$/\.json/">json</output_type>
        <proto_file desc="协议描述文件，对应xresloader的-f选项">proto_v3/kind.pb</proto_file>

        <output_dir desc="输出目录，对应xresloader的-o选项"></output_dir>
        <data_src_dir desc="数据源（Excel查找）目录，对应xresloader的-d选项"></data_src_dir>
        <data_version desc="数据版本号，对应xresloader的--data-version选项，留空则自动生成">1.0.0.0</data_version>

        <rename desc="重命名规则，正则表达式：/搜索模式/替换内容/，对应xresloader的-n选项, 如果在output_type里设置了rename，以output_type里的rename为准，否则使用这里的全局配置" placeholder="/(?i)\.bin$/\.json/"></rename>

        <!-- java_option标签是传递给java -jar的java选项 -->
        <java_option desc="java附加选项">这里的选项会在运行xresloader-*.jar时附加到java控制参数列表中</java_option>
        <java_option desc="java选项-最大内存限制2GB">-Xmx2048m</java_option>
        <java_option desc="java选项-客户端模式">-client</java_option>

        <!-- default_scheme 是下面直接填写scheme时的默认参数。如果后面的scheme标签设置两相同的name，则该条目会覆盖默认配置 -->
        <default_scheme name="KeyRow" desc="默认scheme模式参数-Key行号">2</default_scheme>
        <default_scheme name="MacroSource" desc="默认scheme模式参数-Key行号">资源转换示例.xlsx|macro|2,1</default_scheme>

        <option desc="全局自定义选项" name="美化文本输出，缩进为2个空格">--pretty 2</option>
    </global>

    <gui>
        <!-- 
            set_name标签用于GUI工具生成每个树形节点时执行的事件（nodejs）脚本，可以用于修改显示数据,便于策划核对具体的表名。
            传入的参数结构如下。修改里面的数据可以改变显示的内容。
            {
                item_data: {
                    id: id,
                    file: "数据源文件",
                    scheme: "数据源scheme表名",
                    name: "描述名称",
                    cat: "分类名称",
                    options: ["额外选项"],
                    desc: "描述信息",
                    scheme_data: {"元数据Key": "元数据Value"}
                }
            }
        -->
        <set_name desc="这个脚本用于GUI工具修改树形节点的显示数据,便于策划核对具体的表名">
            if (item_data.file) {
                // 这个示例是给显示名称附加不带后缀的文件名
                item_data.name += " (" + item_data.file.match(/([^.]+)\.\w+$/)[1] + ")"
            }
            return item_data;
        </set_name>

        <!-- 
            on_before_convert和on_after_convert标签用于GUI工具执行转表前和后执行一段（nodejs）脚本，方便用于一些自动化功能的集成。
            传入的参数结构如下:
            {
                work_dir: "执行xresloader的工作目录",
                xresloader_path: "xresloader目录",
                global_options: {"全局选项": "VALUE"},
                selected_nodes: ["选中要执行转表的节点集合"],
                run_seq: "执行序号",
                alert_warning: function(content, title, options) {}, // 警告弹框， options 结构是 {yes: 点击是按钮回调, no: 点击否按钮回调, on_close: 关闭后回调}
                alert_error: function(content, title) {}, // 错误弹框
                log_info: function (content) {}, // 打印info日志
                log_error: function (content) {}, // 打印info日志
                resolve: function (value) {}, // 通知上层执行结束,相当于Promise的resolve
                reject: function(reason) {}, // 通知上层执行失败,相当于Promise的reject
                require: function (name) {} // 相当于 nodejs的 require(name) 用于导入nodejs 模块
            }
        -->
        <on_before_convert type="text/javascript" timeout="15000" description="事件执行结束必须调用resolve(value)或reject(reason)函数，以触发进行下一步">
            // 这里可以执行nodejs代码，比如下面是Windows平台执行 echo work_dir
            var os = require("os");
            var spawn = require("child_process").spawn;
            if (os.type().substr(0, 7).toLowerCase() == "windows") {
                var exec = spawn("cmd.exe", ["/c", "echo " + work_dir], {
                    cwd: work_dir,
                    encoding: 'utf-8'
                });
                exec.stdout.on("data", function(data) {
                    log_info(data);
                });
                exec.stderr.on("data", function(data) {
                    log_error(data);
                });
                exec.on("error", function(data) {
                    log_error(data.toString());
                    reject("执行失败" + data.toString());
                });
                exec.on("exit", function(code) {
                    if (code === 0) {
                        resolve();
                    } else {
                        reject("执行失败");
                    }
                });
            } else {
                resolve();
            }
        </on_before_convert>
        <on_after_convert type="text/javascript" timeout="60000" description="事件执行结束必须调用resolve(value)或reject(reason)函数，以触发进行下一步">
            // 同上
            resolve();
        </on_after_convert>
    </gui>
    
    <groups desc="分组信息，保留，暂未被使用">
        <group id="client" name="客户端"></group>
        <group id="server" name="服务器"></group>
    </groups>

    <category desc="分类信息，这个用于GUI工具做树形结构的分类">
        <tree id="all_cats" name="大分类">
            <tree id="kind" name="角色配置"></tree>
        </tree>
        <tree id="test" name="测试"></tree>
    </category>

    <!-- 转换列表 -->
    <list>
        <item file="描述转换规则的Excel文件名" scheme="描述转换规则的表名" name="显示名称" cat="分类" class="分组">
            <option desc="附加选项" name="附加选项名称">这里的选项会在运行xresloader-*.jar时附加到参数列表中</option>
            <!-- 当这里使用scheme来设置转换规则时，不要设置item标签的file属性和scheme属性 -->
            <scheme name="描述转换规则的Key" desc="描述">描述转换规则的Value用|分割主配置、次配置和补充配置</scheme>
        </item>
        <item file="资源转换示例.xlsx" scheme="scheme_upgrade" name="升级表" cat="kind" class="client server">
            <option desc="自定义选项" name="移除空列表项">--disable-empty-list</option>
        </item>
        <item name="嵌套数组测试" cat="test" class="client server">
            <scheme name="DataSource" desc="数据源(文件名|表名|数据起始行号,数据起始列号)">资源转换示例.xlsx|arr_in_arr|3,1</scheme>
            <scheme name="ProtoName" desc="协议名">arr_in_arr_cfg</scheme>
            <scheme name="OutputFile" desc="输出文件名">arr_in_arr_cfg.bin</scheme>
        </item>
    </list>
</root>